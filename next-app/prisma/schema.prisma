// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication
model Account {
id                        String  @id @default(cuid())
userId                    String
type                      String
provider                  String
providerAccountId         String
refresh_token             String?  @db.Text
access_token              String?  @db.Text
expires_at                Int?
token_type                String?
scope                     String?
id_token                  String?  @db.Text
session_state             String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                      String   @id @default(cuid())
  sessionToken            String   @unique
  userId                  String
  expires                 DateTime
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TokenType {
  VerificationEmail
  ResetPassword
  TwoFactor
  ResetEmail
  Invitation
}
model VerificationToken {
  id                      String    @id @default(cuid())
  identifier              String
  type                    TokenType
  token                   String   @unique
  expires                 DateTime

  @@unique([identifier, token, type])
}


model TwoFactorComfirmation {
  id                      String   @id @default(cuid())

  userId                  String   
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade) 

  @@unique([userId])
}

// User
enum UserRole {
  ADMIN 
  USER
  STUDENT
} 

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  password                String?
  emailVerified           DateTime?
  image                   String?
  role                    UserRole  @default(ADMIN)
  isTwoFactorEnabled      Boolean   @default(false)
  accounts                Account[]
  sessions                Session[]
  twoFactorComfirmation   TwoFactorComfirmation?
  ownedGroup              Group[]
  students                Student[] 
  ownedLessons            Lesson[]
  ownedExercice           Exercice[]
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  notifications           TeacherNotification[]
  createdNotifications    Notification[] @relation("TeacherNotifications")
}

model Student {
  id                      String @id @default(cuid())
  name                    String
  identifier              String @unique
  password                String
  image                   String?
  role                    UserRole @default(STUDENT)
  isActive                Boolean @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  professorId             String
  professor               User @relation(fields: [professorId], references: [id], onDelete: Cascade)
  groupId                 String?
  groupStudent            Group?   @relation(name: "students", fields: [groupId], references: [id], onDelete: SetNull)
  notifications           StudentNotification[]
  createdNotifications    Notification[] @relation("StudentNotifications")
}

model Group {
  id                      String @id @default(cuid())
  name                    String @db.VarChar(20)
  students                Student[] @relation(name: "students")
  lessons                 Lesson[]
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  authorId                String
  author                  User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([name, authorId])
}

model LessonSubject {
  id                      String @id @default(cuid())
  label                   String @unique
  color                   String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  lessons                 Lesson[]

  @@unique([label, color])
}

model GradeLevels  {
  id                      String @id @default(cuid())
  label                   String @unique
  color                   String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  lessons                 Lesson[]

  @@unique([label, color])
}

model Lesson {
  id                      String @id @default(cuid())
  title                   String 
  content                 Json
  slug                    String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  authorId                String
  author                  User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  LessonSubjectID         String
  LessonSubject           LessonSubject @relation(fields: [LessonSubjectID], references: [id], onDelete: Cascade)

  GradeLevelsID           String
  GradeLevels             GradeLevels @relation(fields: [GradeLevelsID], references: [id], onDelete: Cascade)

  exercices               Exercice[]
  groups                  Group[]
  
  @@unique([title, authorId])
  @@unique([slug, authorId])
}

model ExerciceLevel {
  id                      String @id @default(cuid())
  label                   String @unique
  color                   String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  exercices               Exercice[]

  @@unique([label, color])
}

model ExerciceType {
  id                      String @id @default(cuid())
  name                    String @unique
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  exercices Exercice[]
}

// Exercice
model Exercice {
  id                      String @id @default(cuid())
  title                   String
  description             String
  content                 Json
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  typeID                  String
  type                    ExerciceType @relation(fields: [typeID], references: [id], onDelete: Cascade)

  levelID                 String
  level                   ExerciceLevel @relation(fields: [levelID], references: [id], onDelete: Cascade)
  

  authorId                String
  author                  User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  lessonID                String
  lesson                  Lesson   @relation(fields: [lessonID], references: [id], onDelete: Cascade)
}

model Notification {
  id                  String @id @default(cuid())
  type                NotificationType
  message             String
  createdAt           DateTime @default(now())
  lessonId            String?
  exerciseId          String?
  createdByTeacherId  String? 
  createdByStudentId  String?
  createdByTeacher    User? @relation("TeacherNotifications", fields: [createdByTeacherId], references: [id])
  createdByStudent    Student? @relation("StudentNotifications", fields: [createdByStudentId], references: [id])
  studentRecipients   StudentNotification[]
  teacherRecipients   TeacherNotification[]
}

model StudentNotification {
  id             String       @id @default(cuid())
  student        Student      @relation(fields: [studentId], references: [id])
  studentId      String
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId String
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())

  @@unique([studentId, notificationId])
}

model TeacherNotification {
  id             String   @id @default(cuid())
  teacher        User         @relation(fields: [teacherId], references: [id])
  teacherId      String
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId String
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())

  @@unique([teacherId, notificationId])
}

enum NotificationType {
  LESSON
  EXERCISE
  COMPLETION
}