// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TokenType {
  VerificationEmail
  ResetPassword
  TwoFactor
  ResetEmail
}
model VerificationToken {
  id                      String    @id @default(cuid())
  identifier String
  type       TokenType
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token, type])
}


model TwoFactorComfirmation {
  id          String   @id @default(cuid())

  userId      String   
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade) 

  @@unique([userId])
}

// User
enum UserRole {
  ADMIN 
  USER
} 

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  password                String?
  emailVerified           DateTime?
  image                   String?
  role                    UserRole  @default(USER)
  isTwoFactorEnabled      Boolean   @default(false)
  accounts                Account[]
  sessions                Session[]
  twoFactorComfirmation   TwoFactorComfirmation?
  ownedGroup              Group? 
  ownedLessons            Lesson[]
  ownedExercice           Exercice[]
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  groupId                 String?  @unique
  groupUser               Group?   @relation(name: "users", fields: [groupId], references: [id], onDelete: SetNull)
  
}

model Group {
  id                      String @id @default(cuid())
  name                    String
  users                   User[] @relation(name: "users")
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  authorId                String @unique
  author                  User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([name, authorId])
}

model LessonSubject {
  id                      String @id @default(cuid())
  label                   String @unique
  color                   String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  lessons                 Lesson[]

  @@unique([label, color])
}

model GradeLevels  {
  id                      String @id @default(cuid())
  label                   String @unique
  color                   String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  lessons                 Lesson[]

  @@unique([label, color])
}

model Lesson {
  id                      String @id @default(cuid())
  title                   String 
  content                 String
  slug                    String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  authorId                String
  author                  User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  LessonSubjectID         String
  LessonSubject           LessonSubject @relation(fields: [LessonSubjectID], references: [id], onDelete: Cascade)

  GradeLevelsID           String
  GradeLevels             GradeLevels @relation(fields: [GradeLevelsID], references: [id], onDelete: Cascade)

  exercices               Exercice[]
  
  @@unique([title, authorId])
}

model ExerciceLevel {
  id                      String @id @default(cuid())
  label                   String @unique
  color                   String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  exercices               Exercice[]

  @@unique([label, color])
}

// Exercice
enum ExerciceType {
  Card
  True_or_False
  List
  Fill_blank
}
model Exercice {
  id                      String   @id @default(cuid())
  title                   String
  description             String
  levelID                 String
  level                   ExerciceLevel @relation(fields: [levelID], references: [id], onDelete: Cascade)
  type                    ExerciceType
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  authorId                String
  author                  User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  lessonID                String
  lesson                  Lesson   @relation(fields: [lessonID], references: [id], onDelete: Cascade)
  ContentExerciceCardID   ContentExerciceCard?
}

model ContentExerciceCard {
  id                      String   @id @default(cuid())
  content                 Json
  correctAnswer           Json
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  exerciceID              String @unique
  exercice                Exercice @relation(fields: [exerciceID], references: [id], onDelete: Cascade)
}